Using separate 32 bit ports for dirn/step control.
--- grbl-master/limits.c	2014-06-07 13:42:52.000000000 -0700
+++ grbl-master/limits.c	2014-06-07 13:55:15.000000000 -0700
@@ -34,18 +34,10 @@
 
 void limits_init() 
 {
-  LIMIT_DDR &= ~(LIMIT_MASK); // Set as input pins
-  #ifndef LIMIT_SWITCHES_ACTIVE_HIGH
-    LIMIT_PORT |= (LIMIT_MASK); // Enable internal pull-up resistors. Normal high operation.
-  #else // LIMIT_SWITCHES_ACTIVE_HIGH
-    LIMIT_PORT &= ~(LIMIT_MASK); // Normal low operation. Requires external pull-down.
-  #endif // !LIMIT_SWITCHES_ACTIVE_HIGH
   if (bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE)) {
-    LIMIT_PCMSK |= LIMIT_MASK; // Enable specific pins of the Pin Change Interrupt
-    PCICR |= (1 << LIMIT_INT); // Enable Pin Change Interrupt
+    limits_enabled = 1; // Enable
   } else {
-    LIMIT_PCMSK &= ~LIMIT_MASK; // Disable
-    PCICR &= ~(1 << LIMIT_INT); 
+    limits_enabled = 0; // Disable
   }
 }
 
@@ -58,7 +50,7 @@
 // homing cycles and will not respond correctly. Upon user request or need, there may be a
 // special pinout for an e-stop, but it is generally recommended to just directly connect
 // your e-stop switch to the Arduino reset pin, since it is the most correct way to do this.
-ISR(LIMIT_INT_vect) 
+void limits_isr(void) 
 {
   // TODO: This interrupt may be used to manage the homing cycle directly with the main stepper
   // interrupt without adding too much to it. All it would need is some way to stop one axis 
@@ -141,11 +133,14 @@
   uint32_t dt_min = lround(1000000*60/(ds*homing_rate)); // Cruising (usec/step)
   uint32_t dt = 1000000*60/MINIMUM_STEPS_PER_MINUTE; // Initial (usec/step)
   if (dt > dt_min) { dt = dt_min; } // Disable acceleration for very slow rates.
-      
-  // Set default out_bits. 
-  uint8_t out_bits0 = settings.invert_mask;
-  out_bits0 ^= (settings.homing_dir_mask & DIRECTION_MASK); // Apply homing direction settings
-  if (!pos_dir) { out_bits0 ^= DIRECTION_MASK; }   // Invert bits, if negative dir.
+
+  // Set default step/dirn bits.
+  uint16_t step_bits0 = settings.step_invert_mask;
+  uint16_t dirn_bits = settings.dirn_invert_mask;
+  dirn_bits ^= (settings.homing_dir_mask & DIRECTION_MASK); // Apply homing direction settings
+  if (!pos_dir) { dirn_bits ^= DIRECTION_MASK; }   // Invert bits, if negative dir.
+  dirn_wr(dirn_bits);
+  step_wr(step_bits0);
   
   // Initialize stepping variables
   int32_t counter_x = -(step_event_count >> 1); // Bresenham counters
@@ -154,15 +149,15 @@
   uint32_t step_delay = dt-settings.pulse_microseconds;  // Step delay after pulse
   uint32_t step_rate = 0;  // Tracks step rate. Initialized from 0 rate. (in step/min)
   uint32_t trap_counter = MICROSECONDS_PER_ACCELERATION_TICK/2; // Acceleration trapezoid counter
-  uint8_t out_bits;
-  uint8_t limit_state;
+  uint16_t step_bits;
+  uint32_t limit_state;
   for(;;) {
-  
-    // Reset out bits. Both direction and step pins appropriately inverted and set.
-    out_bits = out_bits0;
-    
+
+    // Reset step bits. Step pins appropriately inverted and set.
+    step_bits = step_bits0;
+
     // Get limit pin state.
-    limit_state = LIMIT_PIN;
+    limit_state = debounce_rd();
     if (invert_pin) { limit_state ^= LIMIT_MASK; } // If leaving switch, invert to move.
     
     // Set step pins by Bresenham line algorithm. If limit switch reached, disable and
@@ -170,7 +165,7 @@
     if (cycle_mask & (1<<X_AXIS)) {
       counter_x += steps[X_AXIS];
       if (counter_x > 0) {
-        if (limit_state & (1<<X_LIMIT_BIT)) { out_bits ^= (1<<X_STEP_BIT); }
+        if (limit_state & (1<<X_LIMIT_BIT)) { step_bits ^= (1<<X_STEP_BIT); }
         else { cycle_mask &= ~(1<<X_AXIS); }
         counter_x -= step_event_count;
       }
@@ -178,7 +173,7 @@
     if (cycle_mask & (1<<Y_AXIS)) {
       counter_y += steps[Y_AXIS];
       if (counter_y > 0) {
-        if (limit_state & (1<<Y_LIMIT_BIT)) { out_bits ^= (1<<Y_STEP_BIT); }
+        if (limit_state & (1<<Y_LIMIT_BIT)) { step_bits ^= (1<<Y_STEP_BIT); }
         else { cycle_mask &= ~(1<<Y_AXIS); }
         counter_y -= step_event_count;
       }
@@ -186,7 +181,7 @@
     if (cycle_mask & (1<<Z_AXIS)) {
       counter_z += steps[Z_AXIS];
       if (counter_z > 0) {
-        if (limit_state & (1<<Z_LIMIT_BIT)) { out_bits ^= (1<<Z_STEP_BIT); }
+        if (limit_state & (1<<Z_LIMIT_BIT)) { step_bits ^= (1<<Z_STEP_BIT); }
         else { cycle_mask &= ~(1<<Z_AXIS); }
         counter_z -= step_event_count;
       }
@@ -196,9 +191,9 @@
     if (!(cycle_mask) || (sys.execute & EXEC_RESET)) { return; }
         
     // Perform step.
-    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (out_bits & STEP_MASK);
+    step_wr(step_bits);
     delay_us(settings.pulse_microseconds);
-    STEPPING_PORT = out_bits0;
+    step_wr(step_bits0);
     delay_us(step_delay);
     
     // Track and set the next step delay, if required. This routine uses another Bresenham
