*******************************************************************************
The direction controls can be on their own port and so need 16 bits.
--- grbl-master/planner.h	2014-06-07 11:45:05.000000000 -0700
+++ grbl-master/planner.h	2014-06-07 11:45:22.000000000 -0700
@@ -32,7 +32,7 @@
 typedef struct {
 
   // Fields used by the bresenham algorithm for tracing the line
-  uint8_t  direction_bits;            // The direction bit set for this block (refers to *_DIRECTION_BIT in config.h)
+  uint16_t  direction_bits;           // The direction bit set for this block (refers to *_DIRECTION_BIT in config.h)
   uint32_t steps_x, steps_y, steps_z; // Step count along each axis
   int32_t  step_event_count;          // The number of step events required to complete this block
 
*******************************************************************************
Set the A-axis direction bit for XYZY operation.
--- grbl-master/planner.c	2014-08-30 11:03:53.034772382 -0700
+++ grbl-master/planner.c	2014-08-30 11:06:05.174383588 -0700
@@ -357,7 +357,11 @@
   // Compute direction bits for this block
   block->direction_bits = 0;
   if (target[X_AXIS] < pl.position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
+#if defined(AXES_XYZY)
+  if (target[Y_AXIS] < pl.position[Y_AXIS]) { block->direction_bits |= ((1<<Y_DIRECTION_BIT)|(1<<A_DIRECTION_BIT)); }
+#else
   if (target[Y_AXIS] < pl.position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
+#endif
   if (target[Z_AXIS] < pl.position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
   
   // Number of steps for each axis
